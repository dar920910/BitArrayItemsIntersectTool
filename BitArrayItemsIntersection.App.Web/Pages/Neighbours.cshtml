@page "/neighbours"
@using BitArrayItemsIntersection.Library
@model NeighboursModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="row">
    <h1 class="display-2">Neighbours for the Selected Element</h1>
</div>
<hr>
<div>
    <h3>
        Current Element: 
            [ Row: <label id="current_row">@Model.CurrentRow</label> ; 
                Column: <label id="current_col">@Model.CurrentCol</label> ]
    </h3>
</div>
<hr>
<div>
    @if (Model.NeighbourElements is not null)
    {
        <h4>Detected Neighbours of the Current Element</h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th scope="col" style="color: white; background-color: black;">#</th>
                    <th scope="col" style="color: white; background-color: black;">Row</th>
                    <th scope="col" style="color: white; background-color: black;">Column</th>
                    <th scope="col" style="color: white; background-color: black;">Is Charged</th>
                </tr>
            </thead>
            <tbody>
                @for (byte @index = 0; @index < @Model.NeighbourElements.Count; @index++)
                {
                    BooleanElementInfo @element = @Model.NeighbourElements.ElementAt(@index);

                    <tr>
                        <th scope="row" style="color: white; background-color: black;">Neighbour: @index</th>
                        <td class="@MatrixModel.GetElementClass(@element.IsCharged)">@element.Row</td>
                        <td class="@MatrixModel.GetElementClass(@element.IsCharged)">@element.Column</td>
                        <td class="@MatrixModel.GetElementClass(@element.IsCharged)">@element.IsCharged</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<hr>
<div>
    @if (Model.TargetArray.Content is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col" style="color: white; background-color: black;">#</th>
                @for (int @column = 0; @column < @Model.TargetArray.CountOfColumns; @column++)
                {
                    <th scope="col" style="color: white; background-color: black;">Column: @column</th>
                }
                </tr>
            </thead>
            <tbody>
            @for (byte @row = 0; @row < @Model.TargetArray.CountOfRows; @row++)
            {
                <tr>
                    <th scope="row" style="color: white; background-color: black;">Row: @row</th>
                @for (byte @column = 0; @column < @Model.TargetArray.CountOfColumns; @column++)
                {
                    <td class="@Model.GetElementClass(@row, @column)">
                        @Model.TargetArray.Content[@row, @column]
                    </td>
                }
                </tr>
            }
            </tbody>
        </table>
    }
</div>
<hr>
<a class="btn btn-primary" href="/">Return to Home Page</a>
